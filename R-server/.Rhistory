library(RestRserve)
library(jsonlite)
library(data.table)
library(factoextra)
library(plyr)
library(dplyr)
library(ggplot2)
basedir = ("./rscript")
basedirData=("./data")
FILE_Global_Mobility_Report=paste(basedirData,"Global_Mobility_Report.csv",sep="/")
FILE_DB_Mobility=paste(basedirData,"DB_GoogleMobility.csv",sep="/")
FILE_COUNTRY=paste(basedirData,"country.json",sep="/")
source(paste(basedir,"apps_functions.R",sep="/"))
source(paste(basedir,"MobData_function.R",sep="/"))
source(paste(basedir,"DescSummary_function.R",sep="/"))
# PLOT MOBILITY COMPONENTS
# CARICO LA SOURCE
source(paste(basedir,"PlotMobComp_function.R",sep="/"))
# POLICY INDICATOR
# CARICO LA SOURCE
source(paste(basedir,"PolicyIndicator_function.R",sep="/"))
##
## altri caricamenti fi funzioni
## source(".. ")
##
app = Application$new()
COUNTRIES<-loadCountries()
countries("AD",NULL)
d<-countries("AD",NULL)
countries<-COUNTRIES$country
a<-subset(countries,country=="AD")
source(paste(basedir,"apps_functions.R",sep="/"))
d<-countries("AD",NULL)
source(paste(basedir,"apps_functions.R",sep="/"))
source(paste(basedir,"MobData_function.R",sep="/"))
d<-countries("AD",NULL)
d
d<-countries(NULL,"Italy)
a
d<-countries(NULL,"Italy")
d
library(RestRserve)
library(jsonlite)
library(data.table)
library(factoextra)
library(plyr)
library(dplyr)
library(ggplot2)
basedir = ("./rscript")
basedirData=("./data")
FILE_Global_Mobility_Report=paste(basedirData,"Global_Mobility_Report.csv",sep="/")
FILE_DB_Mobility=paste(basedirData,"DB_GoogleMobility.csv",sep="/")
FILE_COUNTRY=paste(basedirData,"country.json",sep="/")
source(paste(basedir,"apps_functions.R",sep="/"))
source(paste(basedir,"MobData_function.R",sep="/"))
source(paste(basedir,"DescSummary_function.R",sep="/"))
# PLOT MOBILITY COMPONENTS
# CARICO LA SOURCE
source(paste(basedir,"PlotMobComp_function.R",sep="/"))
# POLICY INDICATOR
# CARICO LA SOURCE
source(paste(basedir,"PolicyIndicator_function.R",sep="/"))
##
## altri caricamenti fi funzioni
## source(".. ")
##
app = Application$new()
COUNTRIES<-loadCountries()
GMR<-loadData()
head(GMR)
# region     = "Italy" # Paese Europeo da Scaricare
subregion  = "Italy"
region     = "Italy" # Paese Europeo da Scaricare
#  subregion  = "Italy"
gmr<-subset(GMR,Country==region)
gmr<-as.data.frame(gmr)
gmr$Region<-ifelse(gmr$Region=="",region,gmr$Region)
var<-c("Dates","Retail","Grocery_Pharmacy","Parks","Transit_Station","Workplaces","Residential")
db_stat<-gmr[(gmr$Region==subregion),]
db_stat<-db_stat[,4:10]
db_stat[is.na(db_stat)]<-0
colnames(db_stat)<-var
######### BARBARA  ####################
PCAest <-prcomp(db_stat[,c(2:7)],scale=TRUE)
library(factoextra)
library(ggplot2)
# Results for Variables
res.var <- get_pca_var(PCAest)
print(res.var$coord)          # Coordinates
print(res.var$contrib)        # Contributions to the PCs
print(res.var$cos2)           # Quality of representation
eig <- get_eig(PCAest)
ExpVar <- as.data.frame(eig[2])
tab_res<-as.data.frame(res.var[c(1,4,3)])
tab_res<-tab_res[c(1,7,13)]
#    View(tab_res)
tab_var<-c("Coordinates","Contributions to the PCs","Quality of representation")
colnames(tab_res)<-tab_var
PC1 <- PCAest$x[,'PC1']
dates <- db_stat[,1];
minI = min(PC1);
maxI = max(PC1);
PolInd = (PC1-minI)/(maxI-minI)
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35)
DPolInd = data.frame(dates,PolInd,smoothingSpline$y)
names(DPolInd) <- c('Date', 'PolInd', 'Smooth-PolInd')
db_stat$PolInd <- PolInd
library(zoo)
x <- as.POSIXct(db_stat$Dates,format="%Y-%m-%d")
mo <- strftime(x, "%m")
yr <- strftime(x, "%Y")
PolInd_M <- db_stat$PolInd
dd <- data.frame(mo, yr, PolInd_M)
dfM <- aggregate(PolInd_M ~ mo + yr, dd, FUN = mean)
dfM$Date <- as.yearmon(paste(dfM$yr, dfM$mo), "%Y %m")
smoothingSpline = smooth.spline(dfM$Date, dfM$PolInd_M, spar=0.35)
MPolInd = data.frame(dfM$Date,dfM$PolInd_M,smoothingSpline$y)
names(MPolInd) <- c('Date', 'MPolInd', 'Smooth-MPolInd')
PCAresult<- as.data.frame(tab_res)
View(MPolInd)
library(RestRserve)
library(jsonlite)
library(data.table)
library(factoextra)
library(plyr)
library(dplyr)
library(ggplot2)
basedir = ("./rscript")
basedirData=("./data")
FILE_Global_Mobility_Report=paste(basedirData,"Global_Mobility_Report.csv",sep="/")
FILE_DB_Mobility=paste(basedirData,"DB_GoogleMobility.csv",sep="/")
FILE_COUNTRY=paste(basedirData,"country.json",sep="/")
source(paste(basedir,"apps_functions.R",sep="/"))
source(paste(basedir,"MobData_function.R",sep="/"))
source(paste(basedir,"DescSummary_function.R",sep="/"))
# PLOT MOBILITY COMPONENTS
# CARICO LA SOURCE
source(paste(basedir,"PlotMobComp_function.R",sep="/"))
# POLICY INDICATOR
# CARICO LA SOURCE
source(paste(basedir,"PolicyIndicator_function.R",sep="/"))
##
## altri caricamenti fi funzioni
## source(".. ")
##
app = Application$new()
COUNTRIES<-loadCountries()
GMR<-loadData()
region     = "Italy" # Paese Europeo da Scaricare
subregion  = "Italy"
gmr<-subset(GMR,Country==region)
gmr<-as.data.frame(gmr)
gmr$Region<-ifelse(gmr$Region=="",region,gmr$Region)
var<-c("Dates","Retail","Grocery_Pharmacy","Parks","Transit_Station","Workplaces","Residential")
db_stat<-gmr[(gmr$Region==subregion),]
db_stat<-db_stat[,4:10]
db_stat[is.na(db_stat)]<-0
colnames(db_stat)<-var
######### BARBARA  ####################
PCAest <-prcomp(db_stat[,c(2:7)],scale=TRUE)
library(factoextra)
library(ggplot2)
# Results for Variables
res.var <- get_pca_var(PCAest)
print(res.var$coord)          # Coordinates
print(res.var$contrib)        # Contributions to the PCs
print(res.var$cos2)           # Quality of representation
eig <- get_eig(PCAest)
ExpVar <- as.data.frame(eig[2])
tab_res<-as.data.frame(res.var[c(1,4,3)])
tab_res<-tab_res[c(1,7,13)]
#    View(tab_res)
tab_var<-c("Coordinates","Contributions to the PCs","Quality of representation")
colnames(tab_res)<-tab_var
PC1 <- PCAest$x[,'PC1']
dates <- db_stat[,1];
minI = min(PC1);
maxI = max(PC1);
PolInd = (PC1-minI)/(maxI-minI)
dates
lenght(dates)
typeof(dates)
PolInd
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35)
smoothingSpline = na.spline(dates, PolInd, spar=0.35)
smoothingSpline = na.spline(dates, PolInd)
has_na(dates)
as.has_na(dates)
GMR
is.na(dates)
is.na(PolInd)
is.na(Pol
Ind)
PolInd
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35)
smoothingSpline = smooth.spline(dates, PolInd)
is.na(dates)
library(qvalue)
install.packages(qvalue)
install.packages("qvalue")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue")
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35)
BiocManager::install("qvalue")
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35)
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35,lambda=0)
smoothingSpline = smooth.spline(dates, PolInd,lambda = 0)
library(zoo)
smoothingSpline = smooth.spline(dates, PolInd, spar=0.35)
smoothingSpline = na.spline(dates, PolInd, spar=0.35)
smoothingSpline = na.spline(dates, PolInd)
